(function() {
  var MusicPlayer, MusicTrack, exports, requestAudio;

  if (typeof require === "undefined" || require === null) {
    window.mp = {};
    exports = window.mp;
  } else {
    exports = module.exports;
  }

  requestAudio = function(path, callback) {
    var request;
    request = new XMLHttpRequest;
    request.open('GET', path, true);
    request.responseType = 'arraybuffer';
    request.onload = function() {
      var audioData;
      audioData = request.response;
      return callback(audioData);
    };
    return request.send();
  };

  MusicTrack = (function() {
    MusicTrack.prototype.paused = false;

    MusicTrack.prototype.stopped = true;

    MusicTrack.prototype.soundStart = 0;

    MusicTrack.prototype.pauseOffset = 0;

    function MusicTrack(player, path1, onended, onloaded) {
      this.player = player;
      this.path = path1;
      this.onended = onended;
      this.onloaded = onloaded;
      requestAudio(this.path, (function(_this) {
        return function(audioData) {
          return _this.player.ctx.decodeAudioData(audioData, function(decodedData) {
            _this.buffer = decodedData;
            _this.onloaded();
            return _this.initializeSource();
          });
        };
      })(this));
    }

    MusicTrack.prototype.initializeSource = function() {
      this.source = this.player.ctx.createBufferSource();
      this.source.connect(this.player.gainNode);
      this.source.buffer = this.buffer;
      return this.source.onended = this.onended;
    };

    MusicTrack.prototype.play = function() {
      if (!this.paused && this.stopped) {
        this.soundStart = Date.now();
        this.source.onended = this.onended;
        this.source.start();
        return this.stopped = false;
      } else if (this.paused) {
        this.paused = false;
        this.source.onended = this.onended;
        return this.source.start(0, this.pauseOffset / 1000);
      }
    };

    MusicTrack.prototype.stop = function() {
      if (!this.stopped) {
        this.source.onended = null;
        this.source.stop();
        this.stopped = true;
        this.paused = false;
        return this.initializeSource();
      }
    };

    MusicTrack.prototype.pause = function() {
      if (!(this.paused || this.stopped)) {
        this.pauseOffset = Date.now() - this.soundStart;
        this.paused = true;
        this.source.onended = null;
        this.source.stop();
        return this.initializeSource();
      }
    };

    MusicTrack.prototype.getDuration = function() {
      return this.buffer.duration;
    };

    MusicTrack.prototype.getPosition = function() {
      if (this.paused) {
        return this.pauseOffset / 1000;
      } else if (this.stopped) {
        return 0;
      } else {
        return (Date.now() - this.soundStart) / 1000;
      }
    };

    MusicTrack.prototype.setPosition = function(position) {
      if (position < this.buffer.duration) {
        if (this.paused) {
          return this.pauseOffset = position;
        } else if (this.stopped) {
          this.stopped = false;
          this.soundStart = Date.now() - position * 1000;
          this.source.onended = this.onended;
          return this.source.start(0, position);
        } else {
          this.source.onended = null;
          this.source.stop();
          this.initializeSource();
          this.soundStart = Date.now() - position * 1000;
          return this.source.start(0, position);
        }
      } else {
        throw new Error("Cannot play further the end of the track");
      }
    };

    return MusicTrack;

  })();

  MusicPlayer = (function() {
    MusicPlayer.prototype.playlist = [];

    MusicPlayer.prototype.muted = false;

    MusicPlayer.prototype.onSongFinished = function(path) {
      return void 0;
    };

    MusicPlayer.prototype.onPlaylistEnded = function() {
      return void 0;
    };

    MusicPlayer.prototype.onPlayerStopped = function() {
      return void 0;
    };

    MusicPlayer.prototype.onPlayerPaused = function() {
      return void 0;
    };

    MusicPlayer.prototype.onTrackLoaded = function(path) {
      return void 0;
    };

    MusicPlayer.prototype.onTrackAdded = function(path) {
      return void 0;
    };

    MusicPlayer.prototype.onTrackRemoved = function(path) {
      return void 0;
    };

    MusicPlayer.prototype.onVolumeChanged = function(value) {
      return void 0;
    };

    MusicPlayer.prototype.onMuted = function() {
      return void 0;
    };

    MusicPlayer.prototype.onUnmuted = function() {
      return void 0;
    };

    function MusicPlayer() {
      this.ctx = new (window.AudioContext || window.webkitAudioContext);
      this.gainNode = this.ctx.createGain();
      this.gainNode.connect(this.ctx.destination);
    }

    MusicPlayer.prototype.setVolume = function(value) {
      this.gainNode.gain.value = value;
      return this.onVolumeChanged(value);
    };

    MusicPlayer.prototype.getVolume = function() {
      return this.gainNode.gain.value;
    };

    MusicPlayer.prototype.toggleMute = function() {
      if (this.muted) {
        this.muted = false;
        this.gainNode.gain.value = this.previousGain;
        return this.onUnmuted();
      } else {
        this.previousGain = this.gainNode.gain.value;
        this.gainNode.gain.value = 0;
        this.muted = true;
        return this.onMuted();
      }
    };

    MusicPlayer.prototype.pause = function() {
      if (this.playlist.length !== 0) {
        this.playlist[0].pause();
        return this.onPlayerPaused();
      }
    };

    MusicPlayer.prototype.stop = function() {
      if (this.playlist.length !== 0) {
        this.playlist[0].stop();
        return this.onPlayerStopped();
      }
    };

    MusicPlayer.prototype.play = function() {
      if (this.playlist.length !== 0) {
        return this.playlist[0].play();
      }
    };

    MusicPlayer.prototype.playNext = function() {
      if (this.playlist.length !== 0) {
        this.playlist[0].stop();
        this.playlist.shift();
        if (this.playlist.length === 0) {
          return this.onPlaylistEnded();
        } else {
          return playlist[0].play();
        }
      }
    };

    MusicPlayer.prototype.addTrack = function(path) {
      var finishedCallback, loadedCallback;
      finishedCallback = (function(_this) {
        return function() {
          _this.onSongFinished(path);
          return _this.playNext();
        };
      })(this);
      loadedCallback = (function(_this) {
        return function() {
          return _this.onTrackLoaded(path);
        };
      })(this);
      return this.playlist.push(new MusicTrack(this, path, finishedCallback, loadedCallback));
    };

    MusicPlayer.prototype.insertTrack = function(index, path) {
      var finishedCallback, loadedCallback;
      finishedCallback = (function(_this) {
        return function() {
          _this.onSongFinished(path);
          return _this.playNext();
        };
      })(this);
      loadedCallback = (function(_this) {
        return function() {
          return _this.onTrackLoaded(path);
        };
      })(this);
      return this.playlist.splice(index, 0, new MusicTrack(this, path, finishedCallback, loadedCallback));
    };

    MusicPlayer.prototype.removeTrack = function(index) {
      var song;
      song = this.playlist.splice(index, 1);
      return this.onTrackRemoved(song.path);
    };

    MusicPlayer.prototype.replaceTrack = function(index, path) {
      var finishedCallback, loadedCallback, newTrack, oldTrack;
      finishedCallback = (function(_this) {
        return function() {
          _this.onSongFinished(path);
          return _this.playNext();
        };
      })(this);
      loadedCallback = (function(_this) {
        return function() {
          return _this.onTrackLoaded(path);
        };
      })(this);
      newTrack = new MusicTrack(this, path, finishedCallback, loadedCallback);
      oldTrack = this.playlist.splice(index, 1, newTrack);
      return this.onTrackRemoved(oldTrack.path);
    };

    MusicPlayer.prototype.getSongDuration = function(index) {
      var ref;
      if (this.playlist.length === 0) {
        return 0;
      } else {
        if (index != null) {
          return (ref = playlist[index]) != null ? ref.getDuration() : void 0;
        } else {
          return playlist[0].getDuration();
        }
      }
    };

    MusicPlayer.prototype.getSongPosition = function() {
      if (this.playlist.length === 0) {
        return 0;
      } else {
        return this.playlist[0].getPosition();
      }
    };

    MusicPlayer.prototype.setSongPosition = function(value) {
      if (this.playlist.length !== 0) {
        return this.playlist[0].setPosition(value);
      }
    };

    MusicPlayer.prototype.removeAllTracks = function() {
      var playlist;
      this.stop();
      return playlist = [];
    };

    return MusicPlayer;

  })();

  exports.MusicPlayer = MusicPlayer;

}).call(this);
